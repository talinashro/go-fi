name: CI

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v .

      - name: Run tests with race detector
        run: go test -race -v .

      - name: Run vet
        run: go vet .

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: staticcheck .

  build:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Build
        run: go build -v .

      - name: Test build
        run: |
          go build -o go-fi ./examples/basic
          ./go-fi --help || true

  release:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create v1.0.0 tag if this is the first release
        run: |
          # Only create v1.0.0 if this is the first tag and it doesn't exist
          if [[ "${{ github.ref_name }}" == "v1.0.0" ]] && ! git tag -l | grep -q "^v1\.0\.0$"; then
            echo "Creating v1.0.0 tag for first release"
            git tag v1.0.0
            git push origin v1.0.0
          fi

      - name: Update latest tag
        run: |
          # Delete existing latest tag if it exists
          git tag -d latest 2>/dev/null || true
          git push origin :refs/tags/latest 2>/dev/null || true
          
          # Create new latest tag pointing to current release
          git tag latest
          git push origin latest
          echo "Updated latest tag to point to ${{ github.ref_name }}"

      - name: Verify tags
        run: |
          echo "Current tags:"
          git tag -l | sort -V 